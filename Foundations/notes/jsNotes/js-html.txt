there are two ways to include javascript in your html files the inline way and the linking of a script.
the perfered way to do it is to link the script of your js file
ex: <script src="index.js"><script>

---DOM---
dom stands for document object model. When the browser sees the the html file it will create a copy and store it in the browser
the copy of that html is called the dom. so you can manipulate the dom to change what the browser shows.

---CODE EXAMPLES---
document.querySelector('id') will find the first item that is being queried and return it
document.querySelectorAll('id') will get all of the elements that match the id which is basically an array 
but technically it is called a Nodelist
document.createElement('p') will create a new element in the html
document.getElementById('id') will get the element to the specific id
when you have already found your Node element(the queryselected item) you can do:
    .innerHTML it will show what is in ther specified tag
    .remove() will remove the element from the DOM
    .textContent will get the text content of the element (very similar to innerHTML)
    .setattribute('type','value') can set certain attributes of an element
    .classList is an object where you can access all of the classes of a certain element
    .appendChild(element) will add a child element to the specified element

---EVENT BASED PROGRAMMING---
    >even source/event target
        the button sensor etc.
    >event emitter/event dispatcher
        tells the entire system if something happens
    >event listener and event handlers
        listens for an event to happen and the hadles that by running code
    >event loop
        the browser is running a forever loop that is constantly looking for if something happens 
Types of events:
    > click 
    > scroll
    > mouseover
    > submit
    > doubleclick

in the event call back function you can call the event as the parameter and it will give you a whole list of things that can be used
so in the call back you can put event.preventDefault() and it will stop the default events 
and event.target can show the element that the event happened to as an object.

---ASYNCHRONOUS PROGRAMMNG---
ASYNCHRONOUS prgramming is a way to program so that mutiple things can run at the same time. Things could slow down a lot if you are only running one thing at a time. so we use promises and other things.

---AXIOS---
we can use a promise object to handle data coming back from the server or backend . we will then us a then method.
ex: axios.get("http://www.example.com/people").then(response => {console.log(response.data)})
this will get the response and when we get that we get the data. 
if there is an error when we get a response then we need a way to see that so we use the .catch() method 
ex: axios.get("http://www.example.com/people").then(response => {console.log(response.data)}).catch(err => console.log(err))
the .get will use a url as an agrument and will make a request to recieve some data
.post will take two arguments the url and an object for the body of the request
.put takes two arguments the url and the body to edit the data in the backend and returns a response
.delete takes one argument the url and will delete the data in the backend and returns a response